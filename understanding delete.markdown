Как работает оператор delete

1. Теория
    1. Тип кода
    2. Контекст выполнения
    3. Объект активации / Объект переменных
    4. Атрибуты свойств
    5. Встроенные методы и DontDelete
    6. Незадекларированные присвоения
2. Путаница с Firebug'ом
    1. Удаление переменных с помощью eval
3. Совместимость браузеров
    1. Баг DontDelete в Gecko
4. Баги IE
5. Заблуждения
6. `delete` and host objects
7. ES5 strict mode
8. Вывод

Пару недель назад мне попалась на глаза книга Стояна Стефанова (Stoyan Stefanov) [Объектно-ориентированный Javascript](http://www.amazon.com/Object-Oriented-JavaScript-high-quality-applications-libraries/dp/1847194141). У книги был настолько высокий рейтинг на Амазоне (12 обзоров на 5 звезд), что я решил просмотреть, нет ли в ней чего-нибудь что можно было бы порекомендовать другим. Мне очень понравилось как все описывается в разделе про функции, с которого я начал; поток примеров выстроен таким приятным и прогрессивным образом, что даже начинающие освоят его очень легко. Однако практически сразу я наткнулся на **интересное заблуждение,** описываемое на протяжении целой главы — удаление функций. Есть и другие ошибки (такие как разница между объявлением функции и оператором function), но сейчас мы не будем их обсуждать.

Книга утверждает, что “функции работают как обычные переменные — их можно скопировать в другую переменную или даже удалить”. И приводится следующий пример:

    >>> var sum = function(a, b) {return a + b;}
    >>> var add = sum;
    >>> delete sum
    true
    >>> typeof sum;
    "undefined"

Если не обращать внимания на пару отсутствующих точек с запятой, что еще не так с этим куском кода? Конечно, проблема в том, что удаление переменной sum не должно было пройти успешно; выражение с оператором delete не должно разрешаться в true и typeof sum не должно вернуть  “undefined”. Все потому, что в Javascript'е нельзя удалять переменные. По крайней мере, те, которые определены таким образом.